################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################

########################################################################
# Project setup
########################################################################
cmake_minimum_required(VERSION 2.8...4.0)
project(zproject)
enable_language(C)
enable_testing()

include(GNUInstallDirs)

set(CMAKE_EXPORT_COMPILE_COMMANDS 1)
# Select flags
if(MSVC)
    SET(CMAKE_C_FLAGS_RELEASE "/O2")
else()
    SET(CMAKE_C_FLAGS_RELEASE "-O3")
endif()

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/builds/cmake/Modules)

# Will be used to add flags to pkg-config useful when apps want to statically link
set(pkg_config_libs_private "")
set(pkg_config_names_private "")

########################################################################
# options
########################################################################
OPTION (ENABLE_DRAFTS "Build and install draft classes and methods" ON)
IF (ENABLE_DRAFTS)
    ADD_DEFINITIONS (-DZPROJECT_BUILD_DRAFT_API)
ENDIF (ENABLE_DRAFTS)

########################################################################
# platform.h
########################################################################
include(CheckIncludeFile)
CHECK_INCLUDE_FILE("linux/wireless.h" HAVE_LINUX_WIRELESS_H)
CHECK_INCLUDE_FILE("net/if_media.h" HAVE_NET_IF_MEDIA_H)

include(CheckFunctionExists)
CHECK_FUNCTION_EXISTS("getifaddrs" HAVE_GETIFADDRS)
CHECK_FUNCTION_EXISTS("freeifaddrs" HAVE_FREEIFADDRS)

include(CheckIncludeFiles)
check_include_files("sys/socket.h;net/if.h" HAVE_NET_IF_H)
if (NOT HAVE_NET_IF_H)
    CHECK_INCLUDE_FILE("net/if.h" HAVE_NET_IF_H)
endif()

file(REMOVE "${PROJECT_SOURCE_DIR}/src/platform.h")

file(WRITE "${PROJECT_BINARY_DIR}/platform.h.in" "
#cmakedefine HAVE_LINUX_WIRELESS_H
#cmakedefine HAVE_NET_IF_H
#cmakedefine HAVE_NET_IF_MEDIA_H
#cmakedefine HAVE_GETIFADDRS
#cmakedefine HAVE_FREEIFADDRS
")

configure_file("${PROJECT_BINARY_DIR}/platform.h.in" "${PROJECT_BINARY_DIR}/platform.h")

if (WIN32)
    #The MSVC C compiler is too out of date,
    #so the sources have to be compiled as c++
    if (MSVC AND NOT (CMAKE_CXX_COMPILER_ID MATCHES "Clang"))
        enable_language(CXX)
        file(GLOB sources "${PROJECT_SOURCE_DIR}/src/*.c")
        set_source_files_properties(
            ${sources}
            PROPERTIES LANGUAGE CXX
        )
    endif()
    set(MORE_LIBRARIES ws2_32 Rpcrt4 Iphlpapi)
endif()

# specific case of windows UWP
if( "${CMAKE_SYSTEM_NAME}" STREQUAL "WindowsStore" AND "${CMAKE_SYSTEM_VERSION}" STREQUAL "10.0")
  ADD_DEFINITIONS(-DZMQ_HAVE_WINDOWS_UWP)
  ADD_DEFINITIONS(-D_WIN32_WINNT=_WIN32_WINNT_WIN10)
endif()


# required libraries for mingw
if (MINGW)
    set(MORE_LIBRARIES -lws2_32 -lrpcrt4 -liphlpapi)
endif()

# required libraries for cygwin
if (CYGWIN)
    set(MORE_LIBRARIES)
endif()

list(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}")
set(OPTIONAL_LIBRARIES)
set(OPTIONAL_LIBRARIES_STATIC)

########################################################################
# GSL dependency
########################################################################
IF (NOT gsl_FOUND)
    find_package(gsl REQUIRED)
ENDIF(NOT gsl_FOUND)
IF (gsl_FOUND)
ELSE (gsl_FOUND)
    message( FATAL_ERROR "gsl not found." )
ENDIF (gsl_FOUND)

########################################################################
# version
########################################################################
set(ZPROJECT_VERSION_MAJOR 1)
set(ZPROJECT_VERSION_MINOR 1)
set(ZPROJECT_VERSION_PATCH 0)
set(ZPROJECT_VERSION "${ZPROJECT_VERSION_MAJOR}.${ZPROJECT_VERSION_MINOR}.${ZPROJECT_VERSION_PATCH}")
message(STATUS "Detected ZPROJECT Version - ${ZPROJECT_VERSION}")


########################################################################
# includes
########################################################################
set (zproject_headers
)

source_group ("Header Files" FILES ${zproject_headers})
install(FILES ${zproject_headers} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

########################################################################
# executables
########################################################################

########################################################################
# tests
########################################################################
set(CLASSTEST_TIMEOUT 60 CACHE STRING "Timeout of the selftest of a class")
set(TOTAL_TIMEOUT 600 CACHE STRING "Timout of the total testsuite")

if(UNIX)
    find_program(MEMORYCHECK_COMMAND valgrind)
    set(MEMORYCHECK_COMMAND_OPTIONS "--leak-check=full --show-reachable=yes
                                     --error-exitcode=1
                                     --suppressions=src/.valgrind.supp")
endif()

set(TEST_CLASSES
)


if (NOT TARGET copy-selftest-ro)
    add_custom_target(
        copy-selftest-ro ALL
        COMMAND ${CMAKE_COMMAND} -E copy_directory ${PROJECT_SOURCE_DIR}/src/selftest-ro ${PROJECT_BINARY_DIR}/src/selftest-ro
    )
endif()

if (NOT TARGET make-selftest-rw)
    add_custom_target(
        make-selftest-rw ALL
        COMMAND ${CMAKE_COMMAND} -E make_directory ${PROJECT_BINARY_DIR}/src/selftest-rw
    )
endif()


set_directory_properties(
    PROPERTIES
    ADDITIONAL_MAKE_CLEAN_FILES "${PROJECT_BINARY_DIR}/src/selftest-ro;${PROJECT_BINARY_DIR}/src/selftest-rw"
)

foreach(TEST_CLASS ${TEST_CLASSES})
    add_test(
        NAME ${TEST_CLASS}
        COMMAND zproject_selftest --continue --verbose --test ${TEST_CLASS}
    )
    IF (WIN32 AND CMAKE_PREFIX_PATH)
        file(TO_NATIVE_PATH "${CMAKE_PREFIX_PATH}" CMAKE_PREFIX_PATH_WIN)
        set_tests_properties(
            ${TEST_CLASS}
            PROPERTIES ENVIRONMENT "PATH=%PATH%\;${CMAKE_PREFIX_PATH_WIN}\\bin"
        )
    ENDIF (WIN32 AND CMAKE_PREFIX_PATH)
    set_tests_properties(
        ${TEST_CLASS}
        PROPERTIES TIMEOUT ${CLASSTEST_TIMEOUT}
    )
    set_tests_properties(
        ${TEST_CLASS}
        PROPERTIES DEPENDS "copy-selftest-ro;make-selftest-rw"
    )
endforeach(TEST_CLASS)

include(CTest)

########################################################################
# cleanup
########################################################################
if (NOT TARGET distclean)
    if (CMAKE_VERSION VERSION_LESS 3.17)
        set(rm_command rm -rf)
    else()
        set(rm_command ${CMAKE_COMMAND} -E rm -rf --)
    endif()
    set(cmake_generated ${PROJECT_BINARY_DIR}/CMakeCache.txt
                        ${PROJECT_BINARY_DIR}/cmake_install.cmake
                        ${PROJECT_BINARY_DIR}/Makefile
                        ${PROJECT_BINARY_DIR}/CMakeFiles
                        ${PROJECT_BINARY_DIR}/CTestTestfile.cmake
                        ${PROJECT_BINARY_DIR}/DartConfiguration.tcl
                        ${PROJECT_BINARY_DIR}/Testing
                        ${PROJECT_BINARY_DIR}/compile_commands.json
                        ${PROJECT_BINARY_DIR}/platform.h
                        ${PROJECT_BINARY_DIR}/src/libzproject.pc
                        ${PROJECT_BINARY_DIR}/src/libzproject.so
                        ${PROJECT_BINARY_DIR}/src/zproject_selftest
    )
    add_custom_target(distclean
        COMMAND ${rm_command} CMakeTmp ${cmake_generated}
        COMMENT Cleaning for source distribution
    )
endif()

include(ClangFormat OPTIONAL)

########################################################################
# summary
########################################################################
message ("")
message (STATUS "******************* Configuration Summary *******************")
message (STATUS "General:")
message (STATUS "  Version           :   ${VERSION}")
message (STATUS "  System            :   ${CMAKE_SYSTEM_NAME}")
message (STATUS "  C compiler        :   ${CMAKE_C_COMPILER}")
message (STATUS "  Debug C flags     :   ${CMAKE_C_FLAGS_DEBUG} ${CMAKE_C_FLAGS}")
message (STATUS "  Release C flags   :   ${CMAKE_C_FLAGS_RELEASE} ${CMAKE_C_FLAGS}")
message (STATUS "  Build type        :   ${CMAKE_BUILD_TYPE}")
message (STATUS "  Static build      :   ${ZPROJECT_BUILD_STATIC}")
message (STATUS "  Shared build      :   ${ZPROJECT_BUILD_SHARED}")
IF (ENABLE_DRAFTS)
message (STATUS "  Draft API         :   Yes")
ELSE (ENABLE_DRAFTS)
message (STATUS "  Draft API         :   No")
ENDIF (ENABLE_DRAFTS)
message (STATUS "")
message (STATUS "Dependencies:")
include(FeatureSummary)
feature_summary (WHAT ALL FATAL_ON_MISSING_REQUIRED_PACKAGES)
message (STATUS "")
message (STATUS "Install:")
message (STATUS "  Install prefix    :" "${CMAKE_INSTALL_PREFIX}")
message (STATUS "")
message (STATUS "************************* Options ***************************")
message (STATUS "Options:")
message (STATUS "  Use the Draft API (default = yes):")
message (STATUS "  -DENABLE-DRAFTS=[yes|no]")
message (STATUS "")
message (STATUS "*************************************************************")
message (STATUS "Configuration complete! Now procced with:")
message (STATUS "  'make'                 compile the project")
message (STATUS "  'make test'            run the project's selftest")
message (STATUS "  'make install'         install the project to ${CMAKE_INSTALL_PREFIX}")
message (STATUS "")
message (STATUS "Further options are:")
message (STATUS "  'ctest -V              run test with verbose logging")
message (STATUS "  'ctest -R <test_name>' run a specific test")
message (STATUS "  'ctest -T memcheck'    run the project's selftest with")
message (STATUS "                         valgrind to check for memory leaks")
message (STATUS "")

################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
